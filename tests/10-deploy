#!/usr/bin/python3

import amulet
import os
import unittest
import yaml


class TestBundle(unittest.TestCase):
    bundle_file = os.path.join(os.path.dirname(__file__), '..', 'bundle.yaml')

    @classmethod
    def setUpClass(cls):
        cls.d = amulet.Deployment(series='xenial')
        with open(cls.bundle_file) as f:
            bun = f.read()
        bundle = yaml.safe_load(bun)

        # Beats core is an incomplete bundle by design. We want to
        # encapsulate the infrastructure, and let the beats agents be
        # the entrypoint into many other bundles.

        cls.d.add('ubuntu', 'cs:bionic/ubuntu')
        cls.d.relate('filebeat:beats-host', 'ubuntu:juju-info')

        cls.d.load(bundle)
        cls.d.setup(timeout=1200)
        cls.d.sentry.wait()

        cls.elasticsearch = cls.d.sentry['elasticsearch'][0]
        cls.filebeat = cls.d.sentry['filebeat'][0]

    def test_elasticsearch_host_in_templating(self):
        es_address = self.elasticsearch.relation('client', 'filebeat:elasticsearch')['private-address']  # noqa
        config = self.filebeat.file_contents('/etc/filebeat/filebeat.yml')
        self.assertTrue(es_address in config)

    def test_filebeat_options(self):
        self.d.configure('filebeat',
                         {'logpath': '/var/log/*.log /tmp/amulet.log',
                          'harvester_buffer_size': '9999',
                          'max_bytes': '10485761'})
        self.d.sentry.wait()
        config = self.filebeat.file_contents('/etc/filebeat/filebeat.yml')
        self.assertTrue('/tmp/amulet.log' in config)
        self.assertTrue('9999' in config)
        self.assertTrue('10485761' in config)


if __name__ == "__main__":
    unittest.main()
